=== tests/cases/compiler/genericFunctionInference2.ts ===
// Repro from #30685

type Reducer<S> = (state: S) => S;
>Reducer : Reducer<S>
>state : S

declare function combineReducers<S>(reducers: { [K in keyof S]: Reducer<S[K]> }): Reducer<S>;
>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
>reducers : { [K in keyof S]: Reducer<S[K]>; }

type MyState = { combined: { foo: number } };
>MyState : MyState
>combined : { foo: number; }
>foo : number

declare const foo: Reducer<MyState['combined']['foo']>;
>foo : Reducer<number>

const myReducer1: Reducer<MyState> = combineReducers({
>myReducer1 : Reducer<MyState>
>combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: any; }; }>
>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
>{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }

    combined: combineReducers({ foo }),
>combined : Reducer<{ foo: number; }>
>combineReducers({ foo }) : Reducer<{ foo: number; }>
>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
>{ foo } : { foo: Reducer<number>; }
>foo : Reducer<number>

});

const myReducer2 = combineReducers({
>myReducer2 : Reducer<{ combined: { foo: any; }; }>
>combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: any; }; }>
>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
>{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }

    combined: combineReducers({ foo }),
>combined : Reducer<{ foo: number; }>
>combineReducers({ foo }) : Reducer<{ foo: number; }>
>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
>{ foo } : { foo: Reducer<number>; }
>foo : Reducer<number>

});

